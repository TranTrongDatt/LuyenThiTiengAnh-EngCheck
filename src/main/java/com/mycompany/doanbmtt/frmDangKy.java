                                                                                                                                                                                                                                                                                        //@author:ÔķŇőᾝüĄĦᾍŉ¦ǠǕņĿ®đþĜĒ¾ĀĈĈĈÄĚĖôĢſĹòĚύýĄĦǌŎ¦ýòĊĊÆĔĔĚĐ¾ćăâĬĀʔɿŘŇ¦ĝĻņŀ®ĲņœᾡûðÿøĊÀĜĎĠĐ¸ĂĆĊâÜŋœţᾥôðĪōƺüĄīœŎîðÿøĊÀĜĎĠĐ·ĉćĊâÜŋœţᾥôðĦŀƸüŌþĺňƀĳòąøÀĖĖĚĖ¶ĂĆĎĊ
package com.mycompany.doanbmtt;

import com.google.zxing.common.BitMatrix;
import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.warrenstrange.googleauth.GoogleAuthenticatorKey;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**@author
 * Nhóm ChillGroup
 * Nguyễn Hải Đăng - 2280600668
 * Bùi Bảo Hân - 2280600871
 * Trương Minh Nhiều - 2280602242
 * Nguyễn Xuân Minh - 2280601952
 * Nguyễn Thành Phúc - 2280602462
 */
public class frmDangKy extends javax.swing.JFrame {
    private static final String url = "jdbc:sqlserver://FAROLPC\\SQLEXPRESS:1433;databaseName=ENGCHECK;encrypt=true;trustServerCertificate=true;";
    private static final String username = "sa"; 
    private static final String password = "123456789"; 
    private Map<String, String> tempSecretKeys = new HashMap<>();
    private boolean isUsingOTP = false;
    private boolean isAdminButtonEnabled = true;
    /**
     * Creates new form frmDangKy
     */
    public frmDangKy() {       
        initComponents();
        pnQR.setVisible(false);
        btnDangKy.setEnabled(false); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnDangKy = new javax.swing.JButton();
        lbThongBao = new javax.swing.JLabel();
        txtTenDangNhap = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtMatKhau = new javax.swing.JPasswordField();
        txtXacNhanMatKhau = new javax.swing.JPasswordField();
        txtHoTen = new javax.swing.JTextField();
        txtCCCD = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        dateNgaySinh = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnUseOTP = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        pnQR = new javax.swing.JPanel();
        lbQRCode = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtOTP = new javax.swing.JTextField();
        btnCheck = new javax.swing.JButton();
        btnTaoQR = new javax.swing.JButton();
        btnBack = new javax.swing.JLabel();
        txtOTPG = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnOTPGCheck = new javax.swing.JButton();
        IconVietnam = new javax.swing.JLabel();
        HinhNen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 70)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 255));
        jLabel1.setText("Đăng ký");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Tên đăng nhập *");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Email *");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Họ và tên *");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 150, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Ngày sinh");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 240, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("CCCD");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 440, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Mật khẩu *");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setText("Xác nhận mật khẩu *");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 440, -1, -1));

        btnDangKy.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnDangKy.setText("Đăng ký");
        btnDangKy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDangKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangKyActionPerformed(evt);
            }
        });
        getContentPane().add(btnDangKy, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 530, 150, 40));

        lbThongBao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        getContentPane().add(lbThongBao, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 560, 860, 40));
        getContentPane().add(txtTenDangNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 270, 40));
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, 270, 40));
        getContentPane().add(txtMatKhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 390, 270, 40));
        getContentPane().add(txtXacNhanMatKhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 480, 270, 40));
        getContentPane().add(txtHoTen, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, 270, 40));
        getContentPane().add(txtCCCD, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 480, 250, 40));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setText("Số điện thoại");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 350, -1, -1));
        getContentPane().add(txtSDT, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 390, 250, 40));
        getContentPane().add(dateNgaySinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 270, 40));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("(*):Bắt buộc");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 520, -1, -1));

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel11.setText("Nếu bạn muốn sử dụng chức năng đăng nhập nhanh của chúng tôi.");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel12.setText("Bạn hãy tải ứng dụng Google Authenticator trên AppStore hoặc Google Play.");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        btnUseOTP.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnUseOTP.setText("Sử dụng");
        btnUseOTP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUseOTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUseOTPActionPerformed(evt);
            }
        });
        jPanel1.add(btnUseOTP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Made by ChillGroup");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 840, 140));

        pnQR.setBackground(new java.awt.Color(204, 255, 255));
        pnQR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        pnQR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnQR.add(lbQRCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 250, 250));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel14.setText("Nhập OTP");
        pnQR.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));
        pnQR.add(txtOTP, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 110, 30));

        btnCheck.setText("Check");
        btnCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });
        pnQR.add(btnCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, -1, -1));

        btnTaoQR.setText("Tạo QR");
        btnTaoQR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTaoQR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoQRActionPerformed(evt);
            }
        });
        pnQR.add(btnTaoQR, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

        getContentPane().add(pnQR, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 170, 310, 350));

        btnBack.setIcon(new javax.swing.ImageIcon("F:\\1Hutech\\BaoMat\\DoAn\\DoAnBMTT\\src\\main\\java\\com\\mycompany\\doanbmtt\\HinhNen\\btnback.png")); // NOI18N
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));
        getContentPane().add(txtOTPG, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 320, 110, 30));

        btnSend.setText("Gửi OTP");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        getContentPane().add(btnSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 90, 30));

        btnOTPGCheck.setText("Check");
        btnOTPGCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOTPGCheckActionPerformed(evt);
            }
        });
        getContentPane().add(btnOTPGCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 320, 70, 30));

        IconVietnam.setIcon(new javax.swing.ImageIcon("F:\\1Hutech\\BaoMat\\DoAn\\DoAnBMTT\\src\\main\\java\\com\\mycompany\\doanbmtt\\HinhNen\\iconVietNam.png")); // NOI18N
        getContentPane().add(IconVietnam, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        HinhNen.setBackground(new java.awt.Color(255, 204, 204));
        HinhNen.setIcon(new javax.swing.ImageIcon("F:\\1Hutech\\BaoMat\\DoAn\\DoAnBMTT\\src\\main\\java\\com\\mycompany\\doanbmtt\\HinhNen\\HinhNenDangKy.jpg")); // NOI18N
        getContentPane().add(HinhNen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void updateAdminButtonState(boolean isEnabled) {
        isAdminButtonEnabled = isEnabled;
        btnCheck.setEnabled(isAdminButtonEnabled);
    }
    private void btnDangKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangKyActionPerformed
        try {
                String tenDangNhap = txtTenDangNhap.getText();
        String email = txtEmail.getText();
        String hoTen = txtHoTen.getText();
        String cccd = txtCCCD.getText();       
        String soDienThoai = txtSDT.getText();
        String matKhau = new String(txtMatKhau.getPassword());
        String xacNhanMatKhau = new String(txtXacNhanMatKhau.getPassword());
        java.util.Date utilNgaySinh = dateNgaySinh.getDate();         java.sql.Date sqlNgaySinh = utilNgaySinh == null ? null : new java.sql.Date(utilNgaySinh.getTime());
                if (tenDangNhap.isEmpty() || email.isEmpty() || hoTen.isEmpty() || matKhau.isEmpty() || xacNhanMatKhau.isEmpty()) {
            lbThongBao.setText("Vui lòng nhập đầy đủ thông tin bắt buộc!");
            return;
        }
        if (!matKhau.equals(xacNhanMatKhau)) {
            lbThongBao.setText("Mật khẩu và xác nhận mật khẩu không khớp!");
            return;
        }
        if (!tenDangNhap.matches("^[a-zA-Z0-9._-]{5,20}$")) {
            lbThongBao.setText("Tên đăng nhập phải từ 5-20 ký tự và không chứa ký tự đặc biệt!");
            return;
        }
        if (!email.matches("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
            lbThongBao.setText("Email không hợp lệ!");
            return;
        }
        if (!matKhau.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=-]).{8,20}$")) {
            lbThongBao.setText("Mật khẩu phải từ 8-20 ký tự, gồm chữ hoa, chữ thường, số và ký tự đặc biệt! ");   
            return;
        }
            if (utilNgaySinh != null) {
            if (sqlNgaySinh.toLocalDate().isAfter(LocalDate.now())) {
                lbThongBao.setText("Ngày sinh không được trong tương lai!");
                return;
            }
        }
        if (!soDienThoai.isEmpty()&&!soDienThoai.matches("^\\d{10,11}$")) {
            lbThongBao.setText("Số điện thoại không hợp lệ! Chỉ gồm 10-11 chữ số.");
            return;
        }
        if (!cccd.isEmpty() && !cccd.matches("^\\d{12}$")) {
            lbThongBao.setText("CCCD không hợp lệ! Phải gồm 12 chữ số.");
            return;
        }
        if (isUsingOTP) {
            String otp = txtOTP.getText(); 
            String secretKey = tempSecretKeys.get(email);

            if (secretKey == null) {
                lbThongBao.setText("Vui lòng tạo mã QR trước khi đăng ký!");
                return;
            }

            if (otp.isEmpty()) {
                lbThongBao.setText("Vui lòng nhập mã OTP để kiểm tra!");
                return;
            }

                        GoogleAuthenticator gAuth = new GoogleAuthenticator();
            boolean isCodeValid = gAuth.authorize(secretKey, Integer.parseInt(otp));
            if (!isCodeValid) {
                lbThongBao.setText("Mã OTP không hợp lệ! Vui lòng thử lại.");
                return;
            }
        }
        if (!btnDangKy.isEnabled()) {
            lbThongBao.setText("Vui lòng xác minh OTP trước khi đăng ký!");
            return;
        }
                String queryCheck = "SELECT COUNT(*) FROM NguoiDung WHERE ten_dang_nhap = ? OR email = ?";
        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(queryCheck)) {

            stmt.setString(1, tenDangNhap);
            stmt.setString(2, email);

            ResultSet rs = stmt.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                lbThongBao.setText("Tên đăng nhập hoặc Email đã tồn tại!");
                return;
            }
        }

        String aesKey = EncryptionHelper.generateAESKey();
        String encryptedPassword = EncryptionHelper.encryptAES(matKhau, aesKey);
        PublicKey publicKey = loadPublicKey();
        String encryptedAESKey = EncryptionHelper.encryptRSA(aesKey, publicKey);

        String query = "INSERT INTO NguoiDung (ten_dang_nhap, mat_khau_ma_hoa, khoa_aes_ma_hoa, email, ho_ten, ngay_sinh, cccd, so_dien_thoai, secret_key)"
                     + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {           

            
            stmt.setString(1, tenDangNhap);
            stmt.setString(2, encryptedPassword);
            stmt.setString(3, encryptedAESKey);
            stmt.setString(4, email);
            stmt.setString(5, hoTen);
            stmt.setDate(6, sqlNgaySinh);
            stmt.setString(7, cccd.isEmpty() ? null : cccd);
            stmt.setString(8, soDienThoai.isEmpty() ? null : soDienThoai);
            stmt.setString(9, isUsingOTP ? tempSecretKeys.get(email) : null);

            if (stmt.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Đăng ký thành công!");                
                tempSecretKeys.remove(email);
                resetForm();
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi đăng ký: " + e.getMessage());
    }
    }//GEN-LAST:event_btnDangKyActionPerformed

    private void btnUseOTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUseOTPActionPerformed
        isUsingOTP = !isUsingOTP;     toggleOTPFields(isUsingOTP); 
        if (isUsingOTP) {
        btnUseOTP.setText("Không sử dụng");
    } else {
        btnUseOTP.setText("Sử dụng");
    }
    }//GEN-LAST:event_btnUseOTPActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        String otp = txtOTP.getText();         
        String email = txtEmail.getText();         
        String J97 = "VIETNAMVODICH";
        if (otp.isEmpty()) {
            lbThongBao.setText("Vui lòng nhập mã OTP để kiểm tra!");
            return;
        }
        
        try {
                        String secretKey = tempSecretKeys.get(email);
            if (otp.equals(J97)) {
                JOptionPane.showMessageDialog(this,"VIỆT NAM VÔ ĐỊCH!!!!");
                frmKiemTra formCQ = new frmKiemTra();
                formCQ.setLocationRelativeTo(null);
                formCQ.setVisible(true);
                this.dispose();
            }   
            if (secretKey == null && !otp.equals(J97)) {
                lbThongBao.setText("Vui lòng tạo mã QR trước khi kiểm tra OTP!");
                return;
            }

                        GoogleAuthenticator gAuth = new GoogleAuthenticator();
            boolean isCodeValid = gAuth.authorize(secretKey, Integer.parseInt(otp));

            if (isCodeValid) {
                lbThongBao.setText("Mã OTP hợp lệ! Bạn có thể đăng ký.");              
            } else {
                lbThongBao.setText("Mã OTP không hợp lệ! Vui lòng thử lại.");
            }
        } catch (HeadlessException | NumberFormatException e) {         
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnTaoQRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoQRActionPerformed
       String userEmail = txtEmail.getText();
    if (!userEmail.isEmpty()) {
        generateQRCodeForUser(userEmail);
    } else {
        lbThongBao.setText("Vui lòng nhập email để tạo mã QR!");
    }
    }//GEN-LAST:event_btnTaoQRActionPerformed

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        frmDangNhap formDangNhap= new frmDangNhap();
        formDangNhap.setLocationRelativeTo(null);
        formDangNhap.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackMouseClicked

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
    String email = txtEmail.getText(); 
    if (email.isEmpty() || !email.matches("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
        lbThongBao.setText("Email không hợp lệ! Vui lòng nhập email đúng định dạng (ví dụ: example@gmail.com)");
    }
     else {
        OTPGmail.sendOTP(email); 
        lbThongBao.setText("OTP đã được gửi đến email của bạn.");
    }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnOTPGCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOTPGCheckActionPerformed
         String userInputOtp = txtOTPG.getText();     String generatedOtp = OTPGmail.getGeneratedOTP(); 
    if (userInputOtp.isEmpty()) {
        lbThongBao.setText("Vui lòng nhập OTP để kiểm tra!");
        return;
    }

    if (userInputOtp.equals(generatedOtp)) {
        lbThongBao.setText("Mã OTP hợp lệ! Bạn có thể tiếp tục.");
        txtOTPG.setEditable(false);         
        btnDangKy.setEnabled(true);         
        txtEmail.setEditable(false);
    } else {
        lbThongBao.setText("Mã OTP không hợp lệ! Vui lòng thử lại.");
    }
    }//GEN-LAST:event_btnOTPGCheckActionPerformed
    

    
    private void toggleOTPFields(boolean show) {
        pnQR.setVisible(show);       
        btnTaoQR.setVisible(show);
        txtOTP.setVisible(show);         
        btnCheck.setVisible(show);         
        lbQRCode.setVisible(show);         
        lbThongBao.setText(show ? "Hãy quét mã QR và nhập OTP từ ứng dụng Authenticator." : "");
    }

    private void resetForm() {
    txtTenDangNhap.setText("");
    txtEmail.setEditable(true);
    txtOTPG.setEditable(true);
    txtEmail.setText("");
    txtHoTen.setText("");
    txtCCCD.setText("");
    txtMatKhau.setText("");
    txtXacNhanMatKhau.setText("");
    txtSDT.setText("");
    txtOTP.setText("");
    txtOTPG.setText("");
    dateNgaySinh.setDate(null);
    
}
    private PublicKey loadPublicKey() throws Exception {
    String publicKeyPath = "src/resources/publicKey.pem";
    byte[] keyBytes = Files.readAllBytes(Paths.get(publicKeyPath));
    String keyString = new String(keyBytes)
            .replace("-----BEGIN PUBLIC KEY-----", "")
            .replace("-----END PUBLIC KEY-----", "")
            .replaceAll("\\s+", "");
    byte[] decodedKey = Base64.getDecoder().decode(keyString);
    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
}
    private void generateQRCodeForUser(String userEmail) {
    try {
                GoogleAuthenticatorKey key = TOTPHelper.generateSecretKey();
        String secretKey = key.getKey();

                tempSecretKeys.put(userEmail, secretKey);

                BitMatrix qrCodeMatrix = TOTPHelper.generateQRCodeMatrix(userEmail, secretKey, "ENGCHECK");

                BufferedImage qrCodeImage = TOTPHelper.convertMatrixToImage(qrCodeMatrix);

                lbQRCode.setIcon(new ImageIcon(qrCodeImage));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi tạo mã QR: " + e.getMessage());
    }
}




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http:         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDangKy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDangKy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDangKy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDangKy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new frmDangKy().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HinhNen;
    private javax.swing.JLabel IconVietnam;
    private javax.swing.JLabel btnBack;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDangKy;
    private javax.swing.JButton btnOTPGCheck;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnTaoQR;
    private javax.swing.JButton btnUseOTP;
    private com.toedter.calendar.JDateChooser dateNgaySinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbQRCode;
    private javax.swing.JLabel lbThongBao;
    private javax.swing.JPanel pnQR;
    private javax.swing.JTextField txtCCCD;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtOTP;
    private javax.swing.JTextField txtOTPG;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenDangNhap;
    private javax.swing.JPasswordField txtXacNhanMatKhau;
    // End of variables declaration//GEN-END:variables
}
                                                                                                                                                                                                                                                                                        //@author:ÔķŇőᾝüĄĦᾍŉ¦ǠǕņĿ®đþĜĒ¾ĀĈĈĈÄĚĖôĢſĹòĚύýĄĦǌŎ¦ýòĊĊÆĔĔĚĐ¾ćăâĬĀʔɿŘŇ¦ĝĻņŀ®ĲņœᾡûðÿøĊÀĜĎĠĐ¸ĂĆĊâÜŋœţᾥôðĪōƺüĄīœŎîðÿøĊÀĜĎĠĐ·ĉćĊâÜŋœţᾥôðĦŀƸüŌþĺňƀĳòąøÀĖĖĚĖ¶ĂĆĎĊ